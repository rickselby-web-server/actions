name: Docker Compose Deploy
description: Deploy to the remote server using docker compose
inputs:
  COMPOSE_FILE_PATH:
    description: The path to the compose file to use for deployment
    required: false
    default: docker-compose.yml
  CONNECT_CONTAINERS:
    description: A comma-separated list of containers to connect to this network
    required: false
    default: ""
  DOCKER_CERT_PATH:
    description: DOCKER_CERT_PATH
    required: false
    default: certs
  STACK_NAME:
    description: Name of the stack to create
    required: true
  KEEP_NETWORKS:
    description: Ensure these containers stay in their networks
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - run: echo "ARGS=-f ${{ inputs.COMPOSE_FILE_PATH }} -p ${{ inputs.STACK_NAME }}" >> $GITHUB_ENV
      shell: bash
    - run: echo "DOCKER_CERT_PATH=${{ inputs.DOCKER_CERT_PATH }}" >> $GITHUB_ENV
      shell: bash
    - run: |
        for c in ${{ inputs.KEEP_NETWORKS }} ; do
          echo "NETWORKS_$(echo ${c^^} | tr - _)="$(docker inspect $(docker compose ps -q $c) -f "{{ range .NetworkSettings.Networks }} {{ .NetworkID }} {{ end }}")"" >> $GITHUB_ENV
        done
      if: ${{ inputs.KEEP_NETWORKS != '' }}
      shell: bash
    - run: docker compose ${{ env.ARGS }} build --pull
      shell: bash
    - run: docker compose ${{ env.ARGS }} pull --ignore-buildable
      shell: bash
    - run: docker compose ${{ env.ARGS }} up -d --remove-orphans
      shell: bash
    - run: ${{ github.action_path }}/network-connect.sh
      env:
        STACK_NAME: ${{ inputs.STACK_NAME }}
        CONTAINERS: ${{ inputs.CONNECT_CONTAINERS }}
      shell: bash
    - run: |
        for c in ${{ inputs.KEEP_NETWORKS }} ; do
          varname="NETWORKS_$(echo ${c^^} | tr - _ )"
          set -x
          for n in ${!varname} ; do
            docker network connect ${n} ${c} || true        
          done        
        done
      if: ${{ inputs.KEEP_NETWORKS != '' }}
      shell: bash
